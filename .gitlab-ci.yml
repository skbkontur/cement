image: $CEMENT_CLI_BASE_IMAGE

stages:
  - prepare
  - build
  - test
  - publish

variables:
  GIT_SUBMODULE_STRATEGY: recursive

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'web'

.tags:
  tags: ['docker', $CEMENT_CLI_DOCKER_TAG]

.version:
  variables:
    VERSION: ${GitVersion_SemVer}
    VERSION_TAG: 'v$VERSION'

.no_git:
  variables:
    GIT_STRATEGY: none

prepare_version:
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0 # forces gitlab CI to perform full (non-shallow) clone
  stage: prepare
  extends: .tags
  before_script:
    - dotnet tool install --tool-path /tools GitVersion.Tool --version 5.10.3
  script:
    - |
      /tools/dotnet-gitversion /output buildserver
      grep 'GitVersion_SemVer=' gitversion.properties >> version.env
  artifacts:
    reports:
      dotenv: version.env

build:
  stage: build
  extends: ['.tags', '.version']
  needs:
    - 'prepare_version'
  script:
    - echo -e "${TXT_GREEN}Version = $VERSION"
    - dotnet restore
    - dotnet build --configuration Release --no-restore
  artifacts:
    untracked: true
    expire_in: 7 days

code_quality:
  stage: test
  extends: .tags
  needs:
    - 'build'
  # temporary allowing code quality check to fail because of abyssmal code quality at the moment of writing
  allow_failure: true
  before_script:
    - |
      dotnet tool install --tool-path /tools JetBrains.ReSharper.GlobalTools --version 2022.2.3
      dotnet tool install --tool-path /tools resharper-to-codeclimate --version 1.0.7
  script:
    - /tools/jb inspectcode Cement.Cli.sln --no-build --severity=WARNING --swea --output=$CI_PROJECT_DIR/inspectcode/code-inspection.xml
    - |
      if [[ ! -f $CI_PROJECT_DIR/inspectcode/code-inspection.xml ]]; then
        echo -e "${TXT_RED}Inspection results not found"
        exit 1
      fi
    - /tools/resharper-to-codeclimate $CI_PROJECT_DIR/inspectcode/code-inspection.xml $CI_PROJECT_DIR/inspectcode/gl-code-quality-report.json
    - |
      if [[ $(grep -sc 'Issue ' $CI_PROJECT_DIR/inspectcode/code-inspection.xml) -gt 0 ]]; then
        echo -e "${TXT_RED}There are code quality issues"
        exit 1
      else
        echo -e "${TXT_GREEN}Everything is ok"
      fi
  artifacts:
    expire_in: 7 days
    paths:
      - $CI_PROJECT_DIR/inspectcode/code-inspection.xml
      - $CI_PROJECT_DIR/inspectcode/gl-code-quality-report.json
    reports:
      codequality:
        - $CI_PROJECT_DIR/inspectcode/gl-code-quality-report.json

run_tests:
  stage: test
  extends: ['.tags', '.version']
  needs:
    - 'prepare_version'
    - 'build'
  variables:
    TEST_PROJ: 'tests/Cement.Cli.Tests/Cement.Cli.Tests.csproj'
  before_script:
    - |
      git config --global user.email "johndoe@foo.bar"
      git config --global user.name "John Doe"
  script:
    - echo -e "${TXT_GREEN}Version = $VERSION"
    - dotnet test --configuration Release --logger:"junit;LogFilePath=$CI_PROJECT_DIR/junit/{assembly}.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --collect:"XPlat Code Coverage" -r $CI_PROJECT_DIR/cobertura
  artifacts:
    expire_in: 7 days
    paths:
      - $CI_PROJECT_DIR/junit/*.xml
      - $CI_PROJECT_DIR/cobertura/*/coverage.cobertura.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/cobertura/*/coverage.cobertura.xml
      junit:
        - $CI_PROJECT_DIR/junit/*.xml

.package:
  stage: publish
  extends: .tags
  needs:
    - 'build'
    - 'run_tests'
  variables:
    OUT_DIR: $CI_PROJECT_DIR/out/$TARGET_RUNTIME
    TARGET_RUNTIME: $TARGET_OS-$TARGET_ARCH
  script: |
    cd $CI_PROJECT_DIR/src/Cement.Cli
    dotnet publish -r $TARGET_RUNTIME -o $OUT_DIR /p:PublishSingleFile=true /p:DebugType=None --self-contained true
  artifacts:
    expire_in: 7 days
    paths:
      - $OUT_DIR

create_binaries:
  parallel:
    matrix:
      - TARGET_OS: [linux, win10, osx, osx.11.0, osx.12]
        TARGET_ARCH: [x64, arm64]
  extends: .package

.meta_package_info:
  variables:
    OUTPUT_FILE: ${CI_COMMIT_SHA}.zip
    PACKAGE_NAME: Cement.Cli.Meta
    PACKAGE_URL: ${CEMENT_CLI_GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/packages/generic/$PACKAGE_NAME/$VERSION/$OUTPUT_FILE

publish_meta_package:
  stage: publish
  extends: ['.tags', '.version', '.meta_package_info']
  image: alpine:3.16
  needs:
    - 'prepare_version'
    - 'create_binaries: [win10, x64]'
    - 'create_binaries: [osx, x64]'
    - 'create_binaries: [linux, x64]'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual
      allow_failure: true
  before_script:
    - |
      apk add --update --no-cache p7zip curl
  script:
    - echo -e "${TXT_GREEN}Version = $VERSION"
    - cp -r ./files-common ./dotnet
    - cp -r ./out/* ./dotnet
    - cp ./externals/NuGet.exe ./dotnet/win10-x64/NuGet.exe
    - 7z a $OUTPUT_FILE dotnet
    - |
      curl --header "PRIVATE-TOKEN: $CEMENT_CLI_CI_TOKEN" \
      --upload-file $OUTPUT_FILE \
      $PACKAGE_URL

create_release:
  stage: publish
  extends: ['.tags', '.version', '.meta_package_info', '.no_git']
  image: registry.gitlab.com/gitlab-org/release-cli:v0.14.0
  needs:
    - 'prepare_version'
    - 'publish_meta_package'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - echo -e "${TXT_GREEN}Version = $VERSION"
  release:
    tag_name: $VERSION_TAG
    description: 'Cement CLI release $VERSION'
    assets:
      links:
        - name: $OUTPUT_FILE
          url: $PACKAGE_URL

create_github_release:
  stage: publish
  extends: ['.tags', '.version', '.meta_package_info', '.no_git']
  variables:
    GH_TOKEN: ${CEMENT_CLI_GH_TOKEN}
  image: alpine:3.16
  needs:
    - 'prepare_version'
    - 'publish_meta_package'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: manual
      allow_failure: true
  before_script:
    - |
      apk add --update --no-cache curl github-cli
  script:
    - echo -e "${TXT_GREEN}Version = $VERSION"
    - |
      curl --header "PRIVATE-TOKEN: $CEMENT_CLI_CI_TOKEN" -O $PACKAGE_URL
    - gh release create --notes "automatic release" -R https://github.com/skbkontur/cement $VERSION_TAG $OUTPUT_FILE
